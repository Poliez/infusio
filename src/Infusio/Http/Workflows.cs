//----------------------
// <auto-generated>
// </auto-generated>
//----------------------
using System.Net.Http;
using Infusio.Model;
using LanguageExt;
using Newtonsoft.Json;

namespace Infusio.Http
{
    using static Prelude;
    using static HttpUtils;

    internal static class Workflows
    {
        public static HttpWorkflow<AccountProfile> AsHttpWorkflow<T>(this InfusioOp<T>.GetAccountProfile op) => HttpWorkflow<AccountProfile>(
               message: Request(HttpMethod.Get, MakeUri($"/account/profile")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(AccountProfile)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<AccountProfile> AsHttpWorkflow<T>(this InfusioOp<T>.UpdateAccountInfo op) => HttpWorkflow<AccountProfile>(
               message: Request(HttpMethod.Put, MakeUri($"/account/profile"), op.AccountInfo),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(AccountProfile)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<AffiliateCommissionList> AsHttpWorkflow<T>(this InfusioOp<T>.SearchCommissions op) => HttpWorkflow<AffiliateCommissionList>(
               message: Request(HttpMethod.Get, MakeUri($"/affiliates/commissions", RequestParameter("affiliateId", op.AffiliateId), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("until", op.Until), RequestParameter("since", op.Since))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(AffiliateCommissionList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<ObjectModel> AsHttpWorkflow<T>(this InfusioOp<T>.RetrieveAffiliateModel op) => HttpWorkflow<ObjectModel>(
               message: Request(HttpMethod.Get, MakeUri($"/affiliates/model")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ObjectModel)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<AppointmentList> AsHttpWorkflow<T>(this InfusioOp<T>.ListAppointments op) => HttpWorkflow<AppointmentList>(
               message: Request(HttpMethod.Get, MakeUri($"/appointments", RequestParameter("contactId", op.ContactId), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("until", op.Until), RequestParameter("since", op.Since))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(AppointmentList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Appointment> AsHttpWorkflow<T>(this InfusioOp<T>.CreateAppointment op) => HttpWorkflow<Appointment>(
               message: Request(HttpMethod.Post, MakeUri($"/appointments"), op.Appointment),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(201, "Created", typeof(Appointment)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<ObjectModel> AsHttpWorkflow<T>(this InfusioOp<T>.RetrieveAppointmentModel op) => HttpWorkflow<ObjectModel>(
               message: Request(HttpMethod.Get, MakeUri($"/appointments/model")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ObjectModel)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Appointment> AsHttpWorkflow<T>(this InfusioOp<T>.GetAppointment op) => HttpWorkflow<Appointment>(
               message: Request(HttpMethod.Get, MakeUri($"/appointments/{op.AppointmentId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Appointment)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Appointment> AsHttpWorkflow<T>(this InfusioOp<T>.UpdateAppointment op) => HttpWorkflow<Appointment>(
               message: Request(HttpMethod.Put, MakeUri($"/appointments/{op.AppointmentId}"), op.AppointmentDTO),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Appointment)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.DeleteAppointment op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/appointments/{op.AppointmentId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Appointment> AsHttpWorkflow<T>(this InfusioOp<T>.UpdatePropertiesOnAppointment op) => HttpWorkflow<Appointment>(
               message: Request(new HttpMethod("Patch"), MakeUri($"/appointments/{op.AppointmentId}"), op.AppointmentDTO),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Appointment)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<CampaignList> AsHttpWorkflow<T>(this InfusioOp<T>.ListCampaigns op) => HttpWorkflow<CampaignList>(
               message: Request(HttpMethod.Get, MakeUri($"/campaigns", RequestParameter("orderDirection", op.OrderDirection), RequestParameter("order", op.Order), RequestParameter("searchText", op.SearchText), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(CampaignList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Campaign> AsHttpWorkflow<T>(this InfusioOp<T>.GetCampaign op) => HttpWorkflow<Campaign>(
               message: Request(HttpMethod.Get, MakeUri($"/campaigns/{op.CampaignId}", RequestParameter("optionalProperties", op.OptionalProperties))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Campaign)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.AddContactsToCampaignSequence op) => HttpWorkflow(
               message: Request(HttpMethod.Post, MakeUri($"/campaigns/{op.CampaignId}/sequences/{op.SequenceId}/contacts"), op.Ids),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Unit)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.RemoveContactsFromCampaignSequence op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/campaigns/{op.CampaignId}/sequences/{op.SequenceId}/contacts"), op.Ids),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.AddContactToCampaignSequence op) => HttpWorkflow(
               message: Request(HttpMethod.Post, MakeUri($"/campaigns/{op.CampaignId}/sequences/{op.SequenceId}/contacts/{op.ContactId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.RemoveContactFromCampaignSequence op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/campaigns/{op.CampaignId}/sequences/{op.SequenceId}/contacts/{op.ContactId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<CompanyList> AsHttpWorkflow<T>(this InfusioOp<T>.ListCompanies op) => HttpWorkflow<CompanyList>(
               message: Request(HttpMethod.Get, MakeUri($"/companies", RequestParameter("optionalProperties", op.OptionalProperties), RequestParameter("orderDirection", op.OrderDirection), RequestParameter("order", op.Order), RequestParameter("companyName", op.CompanyName), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(CompanyList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Company> AsHttpWorkflow<T>(this InfusioOp<T>.CreateCompany op) => HttpWorkflow<Company>(
               message: Request(HttpMethod.Post, MakeUri($"/companies"), op.Company),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(201, "Created", typeof(Company)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<ObjectModel> AsHttpWorkflow<T>(this InfusioOp<T>.RetrieveCompanyModel op) => HttpWorkflow<ObjectModel>(
               message: Request(HttpMethod.Get, MakeUri($"/companies/model")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ObjectModel)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<ContactList> AsHttpWorkflow<T>(this InfusioOp<T>.ListContacts op) => HttpWorkflow<ContactList>(
               message: Request(HttpMethod.Get, MakeUri($"/contacts", RequestParameter("orderDirection", op.OrderDirection), RequestParameter("order", op.Order), RequestParameter("familyName", op.FamilyName), RequestParameter("givenName", op.GivenName), RequestParameter("email", op.Email), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ContactList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<FullContact> AsHttpWorkflow<T>(this InfusioOp<T>.CreateContact op) => HttpWorkflow<FullContact>(
               message: Request(HttpMethod.Post, MakeUri($"/contacts"), op.Contact),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(201, "Created", typeof(FullContact)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<FullContact> AsHttpWorkflow<T>(this InfusioOp<T>.CreateOrUpdateContact op) => HttpWorkflow<FullContact>(
               message: Request(HttpMethod.Put, MakeUri($"/contacts"), op.Contact),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(FullContact)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<ObjectModel> AsHttpWorkflow<T>(this InfusioOp<T>.RetrieveContactModel op) => HttpWorkflow<ObjectModel>(
               message: Request(HttpMethod.Get, MakeUri($"/contacts/model")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ObjectModel)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.DeleteContact op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/contacts/{op.ContactId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<FullContact> AsHttpWorkflow<T>(this InfusioOp<T>.UpdatePropertiesOnContact op) => HttpWorkflow<FullContact>(
               message: Request(new HttpMethod("Patch"), MakeUri($"/contacts/{op.ContactId}"), op.Contact),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(FullContact)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<CreditCardAdded> AsHttpWorkflow<T>(this InfusioOp<T>.CreateCreditCard op) => HttpWorkflow<CreditCardAdded>(
               message: Request(HttpMethod.Post, MakeUri($"/contacts/{op.ContactId}/creditCards"), op.CreditCard),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(201, "Created", typeof(CreditCardAdded)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<EmailSentQueryResultList> AsHttpWorkflow<T>(this InfusioOp<T>.ListEmailsForContact op) => HttpWorkflow<EmailSentQueryResultList>(
               message: Request(HttpMethod.Get, MakeUri($"/contacts/{op.ContactId}/emails", RequestParameter("email", op.Email), RequestParameter("contactId2", op.ContactId2), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(EmailSentQueryResultList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<EmailSentCreate> AsHttpWorkflow<T>(this InfusioOp<T>.CreateEmailForContact op) => HttpWorkflow<EmailSentCreate>(
               message: Request(HttpMethod.Post, MakeUri($"/contacts/{op.ContactId}/emails"), op.EmailWithContent),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(201, "Created", typeof(EmailSentCreate)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<ContactTagList> AsHttpWorkflow<T>(this InfusioOp<T>.ListAppliedTags op) => HttpWorkflow<ContactTagList>(
               message: Request(HttpMethod.Get, MakeUri($"/contacts/{op.ContactId}/tags", RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ContactTagList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.ApplyTagsToContactId op) => HttpWorkflow(
               message: Request(HttpMethod.Post, MakeUri($"/contacts/{op.ContactId}/tags"), op.TagIds),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Unit)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.RemoveTagsFromContact op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/contacts/{op.ContactId}/tags", RequestParameter("ids", op.Ids))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.RemoveTagsFromContact2 op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/contacts/{op.ContactId}/tags/{op.TagId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<FullContact> AsHttpWorkflow<T>(this InfusioOp<T>.GetContact op) => HttpWorkflow<FullContact>(
               message: Request(HttpMethod.Get, MakeUri($"/contacts/{op.Id}", RequestParameter("optionalProperties", op.OptionalProperties))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(FullContact)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<EmailSentQueryResultList> AsHttpWorkflow<T>(this InfusioOp<T>.ListEmails op) => HttpWorkflow<EmailSentQueryResultList>(
               message: Request(HttpMethod.Get, MakeUri($"/emails", RequestParameter("email", op.Email), RequestParameter("contactId", op.ContactId), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(EmailSentQueryResultList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<EmailSentCreate> AsHttpWorkflow<T>(this InfusioOp<T>.CreateEmail op) => HttpWorkflow<EmailSentCreate>(
               message: Request(HttpMethod.Post, MakeUri($"/emails"), op.EmailWithContent),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(201, "Created", typeof(EmailSentCreate)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<EmailSentCreateList> AsHttpWorkflow<T>(this InfusioOp<T>.CreateEmails op) => HttpWorkflow<EmailSentCreateList>(
               message: Request(HttpMethod.Post, MakeUri($"/emails/sync"), op.EmailWithContent),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(201, "Created", typeof(EmailSentCreateList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.DeleteEmails op) => HttpWorkflow(
               message: Request(HttpMethod.Post, MakeUri($"/emails/unsync"), op.EmailIds),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Unit)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<EmailSentQueryResultWithContent> AsHttpWorkflow<T>(this InfusioOp<T>.GetEmail op) => HttpWorkflow<EmailSentQueryResultWithContent>(
               message: Request(HttpMethod.Get, MakeUri($"/emails/{op.Id}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(EmailSentQueryResultWithContent)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<EmailSentCreate> AsHttpWorkflow<T>(this InfusioOp<T>.UpdateEmail op) => HttpWorkflow<EmailSentCreate>(
               message: Request(HttpMethod.Put, MakeUri($"/emails/{op.Id}"), op.EmailWithContent),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(EmailSentCreate)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.DeleteEmail op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/emails/{op.Id}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<FileList> AsHttpWorkflow<T>(this InfusioOp<T>.ListFiles op) => HttpWorkflow<FileList>(
               message: Request(HttpMethod.Get, MakeUri($"/files", RequestParameter("contactId", op.ContactId), RequestParameter("name", op.Name), RequestParameter("type", op.Type), RequestParameter("permission", op.Permission), RequestParameter("viewable", op.Viewable), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(FileList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<FileInformation> AsHttpWorkflow<T>(this InfusioOp<T>.CreateFile op) => HttpWorkflow<FileInformation>(
               message: Request(HttpMethod.Post, MakeUri($"/files"), op.FileUpload),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(FileInformation)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<FileInformation> AsHttpWorkflow<T>(this InfusioOp<T>.GetFile op) => HttpWorkflow<FileInformation>(
               message: Request(HttpMethod.Get, MakeUri($"/files/{op.FileId}", RequestParameter("optionalProperties", op.OptionalProperties))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(FileInformation)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<FileInformation> AsHttpWorkflow<T>(this InfusioOp<T>.UpdateFile op) => HttpWorkflow<FileInformation>(
               message: Request(HttpMethod.Put, MakeUri($"/files/{op.FileId}"), op.FileUpload),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(FileInformation)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.DeleteFile op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/files/{op.FileId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.ListStoredHookSubscriptions op) => HttpWorkflow(
               message: Request(HttpMethod.Get, MakeUri($"/hooks")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Unit)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<RestHook> AsHttpWorkflow<T>(this InfusioOp<T>.CreateAHookSubscription op) => HttpWorkflow<RestHook>(
               message: Request(HttpMethod.Post, MakeUri($"/hooks"), op.RestHookRequest),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(RestHook)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.ListHookEventTypes op) => HttpWorkflow(
               message: Request(HttpMethod.Get, MakeUri($"/hooks/event_keys")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Unit)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<RestHook> AsHttpWorkflow<T>(this InfusioOp<T>.RetrieveAHookSubscription op) => HttpWorkflow<RestHook>(
               message: Request(HttpMethod.Get, MakeUri($"/hooks/{op.Key}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(RestHook)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<RestHook> AsHttpWorkflow<T>(this InfusioOp<T>.UpdateAHookSubscription op) => HttpWorkflow<RestHook>(
               message: Request(HttpMethod.Put, MakeUri($"/hooks/{op.Key}"), op.RestHookRequest),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(RestHook)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.DeleteAHookSubscription op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/hooks/{op.Key}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<RestHook> AsHttpWorkflow<T>(this InfusioOp<T>.VerifyAHookSubscriptionDelayed op) => HttpWorkflow<RestHook>(
               message: Request(HttpMethod.Post, MakeUri($"/hooks/{op.Key}/delayedVerify")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(RestHook)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<RestHook> AsHttpWorkflow<T>(this InfusioOp<T>.VerifyAHookSubscription op) => HttpWorkflow<RestHook>(
               message: Request(HttpMethod.Post, MakeUri($"/hooks/{op.Key}/verify")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(RestHook)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<CountriesByCode> AsHttpWorkflow<T>(this InfusioOp<T>.ListCountries op) => HttpWorkflow<CountriesByCode>(
               message: Request(HttpMethod.Get, MakeUri($"/locales/countries")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(CountriesByCode)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<ProvincesByCode> AsHttpWorkflow<T>(this InfusioOp<T>.ListCountries2 op) => HttpWorkflow<ProvincesByCode>(
               message: Request(HttpMethod.Get, MakeUri($"/locales/countries/{op.CountryCode}/provinces")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ProvincesByCode)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<UserInfoDTO> AsHttpWorkflow<T>(this InfusioOp<T>.GetUserInfo op) => HttpWorkflow<UserInfoDTO>(
               message: Request(HttpMethod.Get, MakeUri($"/oauth/connect/userinfo")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(UserInfoDTO)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<OpportunityList> AsHttpWorkflow<T>(this InfusioOp<T>.ListOpportunities op) => HttpWorkflow<OpportunityList>(
               message: Request(HttpMethod.Get, MakeUri($"/opportunities", RequestParameter("order", op.Order), RequestParameter("searchTerm", op.SearchTerm), RequestParameter("stageId", op.StageId), RequestParameter("userId", op.UserId), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(OpportunityList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Opportunity> AsHttpWorkflow<T>(this InfusioOp<T>.CreateOpportunity op) => HttpWorkflow<Opportunity>(
               message: Request(HttpMethod.Post, MakeUri($"/opportunities"), op.Opportunity),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Opportunity)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<Opportunity> AsHttpWorkflow<T>(this InfusioOp<T>.UpdateOpportunity op) => HttpWorkflow<Opportunity>(
               message: Request(HttpMethod.Put, MakeUri($"/opportunities"), op.Opportunity),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Opportunity)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<ObjectModel> AsHttpWorkflow<T>(this InfusioOp<T>.RetrieveOpportunityModel op) => HttpWorkflow<ObjectModel>(
               message: Request(HttpMethod.Get, MakeUri($"/opportunities/model")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ObjectModel)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Opportunity> AsHttpWorkflow<T>(this InfusioOp<T>.GetOpportunity op) => HttpWorkflow<Opportunity>(
               message: Request(HttpMethod.Get, MakeUri($"/opportunities/{op.OpportunityId}", RequestParameter("optionalProperties", op.OptionalProperties))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Opportunity)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Opportunity> AsHttpWorkflow<T>(this InfusioOp<T>.UpdatePropertiesOnOpportunity op) => HttpWorkflow<Opportunity>(
               message: Request(new HttpMethod("Patch"), MakeUri($"/opportunities/{op.OpportunityId}"), op.Opportunity),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Opportunity)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.ListOpportunityStagePipelines op) => HttpWorkflow(
               message: Request(HttpMethod.Get, MakeUri($"/opportunity/stage_pipeline")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Unit)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<OrderList> AsHttpWorkflow<T>(this InfusioOp<T>.ListOrders op) => HttpWorkflow<OrderList>(
               message: Request(HttpMethod.Get, MakeUri($"/orders", RequestParameter("productId", op.ProductId), RequestParameter("contactId", op.ContactId), RequestParameter("order", op.Order), RequestParameter("paid", op.Paid), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("until", op.Until), RequestParameter("since", op.Since))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(OrderList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<ObjectModel> AsHttpWorkflow<T>(this InfusioOp<T>.RetrieveOrderModel op) => HttpWorkflow<ObjectModel>(
               message: Request(HttpMethod.Get, MakeUri($"/orders/model")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ObjectModel)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Order> AsHttpWorkflow<T>(this InfusioOp<T>.GetOrder op) => HttpWorkflow<Order>(
               message: Request(HttpMethod.Get, MakeUri($"/orders/{op.OrderId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Order)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<TransactionList> AsHttpWorkflow<T>(this InfusioOp<T>.ListTransactionsForOrder op) => HttpWorkflow<TransactionList>(
               message: Request(HttpMethod.Get, MakeUri($"/orders/{op.OrderId}/transactions", RequestParameter("contactId", op.ContactId), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("until", op.Until), RequestParameter("since", op.Since))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(TransactionList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<ProductList> AsHttpWorkflow<T>(this InfusioOp<T>.ListProducts op) => HttpWorkflow<ProductList>(
               message: Request(HttpMethod.Get, MakeUri($"/products", RequestParameter("active", op.Active), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ProductList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Product> AsHttpWorkflow<T>(this InfusioOp<T>.CreateProduct op) => HttpWorkflow<Product>(
               message: Request(HttpMethod.Post, MakeUri($"/products"), op.CreateProductModel),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(201, "Created", typeof(Product)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<ProductStatusList> AsHttpWorkflow<T>(this InfusioOp<T>.ListProductsFromSyncToken op) => HttpWorkflow<ProductStatusList>(
               message: Request(HttpMethod.Get, MakeUri($"/products/sync", RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("syncToken", op.SyncToken))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ProductStatusList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Product> AsHttpWorkflow<T>(this InfusioOp<T>.RetrieveProduct op) => HttpWorkflow<Product>(
               message: Request(HttpMethod.Get, MakeUri($"/products/{op.ProductId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Product)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.DeleteProduct op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/products/{op.ProductId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<ProductSubscription> AsHttpWorkflow<T>(this InfusioOp<T>.CreateProductSubscription op) => HttpWorkflow<ProductSubscription>(
               message: Request(HttpMethod.Post, MakeUri($"/products/{op.ProductId}/subscriptions"), op.CreateProductSubscriptionModel),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(201, "Created", typeof(ProductSubscription)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<ProductSubscription> AsHttpWorkflow<T>(this InfusioOp<T>.RetrieveProductSubscription op) => HttpWorkflow<ProductSubscription>(
               message: Request(HttpMethod.Get, MakeUri($"/products/{op.ProductId}/subscriptions/{op.SubscriptionId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ProductSubscription)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.DeleteProductSubscription op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/products/{op.ProductId}/subscriptions/{op.SubscriptionId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Setting> AsHttpWorkflow<T>(this InfusioOp<T>.GetApplicationEnabled op) => HttpWorkflow<Setting>(
               message: Request(HttpMethod.Get, MakeUri($"/setting/application/enabled")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Setting)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Setting> AsHttpWorkflow<T>(this InfusioOp<T>.GetContactOptionTypes op) => HttpWorkflow<Setting>(
               message: Request(HttpMethod.Get, MakeUri($"/setting/contact/optionTypes")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Setting)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<ObjectModel> AsHttpWorkflow<T>(this InfusioOp<T>.RetrieveSubscriptionModel op) => HttpWorkflow<ObjectModel>(
               message: Request(HttpMethod.Get, MakeUri($"/subscriptions/model")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ObjectModel)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Tags> AsHttpWorkflow<T>(this InfusioOp<T>.ListTags op) => HttpWorkflow<Tags>(
               message: Request(HttpMethod.Get, MakeUri($"/tags", RequestParameter("category", op.Category), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Tags)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Tag> AsHttpWorkflow<T>(this InfusioOp<T>.CreateTag op) => HttpWorkflow<Tag>(
               message: Request(HttpMethod.Post, MakeUri($"/tags"), op.Tag),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Tag)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<TagCategory> AsHttpWorkflow<T>(this InfusioOp<T>.CreateTagCategory op) => HttpWorkflow<TagCategory>(
               message: Request(HttpMethod.Post, MakeUri($"/tags/categories"), op.TagCategory),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(TagCategory)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<Tag> AsHttpWorkflow<T>(this InfusioOp<T>.GetTag op) => HttpWorkflow<Tag>(
               message: Request(HttpMethod.Get, MakeUri($"/tags/{op.Id}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Tag)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<TaggedContactList> AsHttpWorkflow<T>(this InfusioOp<T>.ListContactsForTagId op) => HttpWorkflow<TaggedContactList>(
               message: Request(HttpMethod.Get, MakeUri($"/tags/{op.TagId}/contacts", RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(TaggedContactList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.ApplyTagToContactIds op) => HttpWorkflow(
               message: Request(HttpMethod.Post, MakeUri($"/tags/{op.TagId}/contacts"), op.Ids),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Unit)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.RemoveTagFromContactIds op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/tags/{op.TagId}/contacts", RequestParameter("ids", op.Ids))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.RemoveTagFromContactId op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/tags/{op.TagId}/contacts/{op.ContactId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<TaskList> AsHttpWorkflow<T>(this InfusioOp<T>.ListTasks op) => HttpWorkflow<TaskList>(
               message: Request(HttpMethod.Get, MakeUri($"/tasks", RequestParameter("order", op.Order), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("completed", op.Completed), RequestParameter("until", op.Until), RequestParameter("since", op.Since), RequestParameter("userId", op.UserId), RequestParameter("hasDueDate", op.HasDueDate), RequestParameter("contactId", op.ContactId))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(TaskList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<InfusionTask> AsHttpWorkflow<T>(this InfusioOp<T>.CreateTask op) => HttpWorkflow<InfusionTask>(
               message: Request(HttpMethod.Post, MakeUri($"/tasks"), op.Task),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(InfusionTask)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error))
               )
        );

        public static HttpWorkflow<ObjectModel> AsHttpWorkflow<T>(this InfusioOp<T>.RetrieveTaskModel op) => HttpWorkflow<ObjectModel>(
               message: Request(HttpMethod.Get, MakeUri($"/tasks/model")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(ObjectModel)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<TaskList> AsHttpWorkflow<T>(this InfusioOp<T>.ListTasksForCurrentUser op) => HttpWorkflow<TaskList>(
               message: Request(HttpMethod.Get, MakeUri($"/tasks/search", RequestParameter("order", op.Order), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("completed", op.Completed), RequestParameter("until", op.Until), RequestParameter("since", op.Since), RequestParameter("userId", op.UserId), RequestParameter("hasDueDate", op.HasDueDate), RequestParameter("contactId", op.ContactId))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(TaskList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<InfusionTask> AsHttpWorkflow<T>(this InfusioOp<T>.GetTask op) => HttpWorkflow<InfusionTask>(
               message: Request(HttpMethod.Get, MakeUri($"/tasks/{op.TaskId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(InfusionTask)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<InfusionTask> AsHttpWorkflow<T>(this InfusioOp<T>.UpdateTask op) => HttpWorkflow<InfusionTask>(
               message: Request(HttpMethod.Put, MakeUri($"/tasks/{op.TaskId}"), op.Task),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(InfusionTask)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Unit> AsHttpWorkflow<T>(this InfusioOp<T>.DeleteTask op) => HttpWorkflow(
               message: Request(HttpMethod.Delete, MakeUri($"/tasks/{op.TaskId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(204, "No Content", typeof(Unit)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<InfusionTask> AsHttpWorkflow<T>(this InfusioOp<T>.UpdatePropertiesOnTask op) => HttpWorkflow<InfusionTask>(
               message: Request(new HttpMethod("Patch"), MakeUri($"/tasks/{op.TaskId}"), op.Task),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(InfusionTask)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<TransactionList> AsHttpWorkflow<T>(this InfusioOp<T>.ListTransactions op) => HttpWorkflow<TransactionList>(
               message: Request(HttpMethod.Get, MakeUri($"/transactions", RequestParameter("contactId", op.ContactId), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("until", op.Until), RequestParameter("since", op.Since))),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(TransactionList)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );

        public static HttpWorkflow<Transaction> AsHttpWorkflow<T>(this InfusioOp<T>.GetTransaction op) => HttpWorkflow<Transaction>(
               message: Request(HttpMethod.Get, MakeUri($"/transactions/{op.TransactionId}")),
               responses: HashSet<KnownResponse.Eq, KnownResponse>(
                   new KnownResponse(200, "OK", typeof(Transaction)),
                   new KnownResponse(401, "Unauthorized", typeof(Error)),
                   new KnownResponse(403, "Forbidden", typeof(Error)),
                   new KnownResponse(404, "Not Found", typeof(Error))
               )
        );


    }
}