//----------------------
// <auto-generated>
// </auto-generated>
//----------------------
using System;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

using Infusio.Model;
using LanguageExt;
using LanguageExt.TypeClasses;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

// ReSharper disable RedundantStringInterpolation

namespace Infusio.Http
{
    using static Prelude;
    using static HttpUtils;
    using static JsonConvert;

    public class InfusioClient
    {
        private readonly HttpClient _client;
        private readonly InfusioConfig _config;

        public InfusioClient(HttpClient client, InfusioConfig config)
        {
            _client = client;
            _config = config;
        }

        /// <summary>
        /// Retrieve account profile
        /// </summary>
        public Task<Either<InfusioError, AccountProfile>> GetAccountProfile() =>
            HttpWorkflow<AccountProfile>(
                message: Request(HttpMethod.Get, MakeUri($"/account/profile"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(AccountProfile)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Updates an account profile
        /// </summary>
        /// <param name="accountInfo">accountInfo</param>
        public Task<Either<InfusioError, AccountProfile>> UpdateAccountInfo(AccountProfile accountInfo) =>
            HttpWorkflow<AccountProfile>(
                message: Request(HttpMethod.Put, MakeUri($"/account/profile"), _config.AccessToken, accountInfo),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(AccountProfile)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve Commissions
        /// </summary>
        /// <param name="affiliateId">Affiliate to retrieve commissions for</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        /// <param name="until">Date to search to ex. `2017-01-01T22:17:59.039Z`</param>
        /// <param name="since">Date to start searching from ex. `2017-01-01T22:17:59.039Z`</param>
        public Task<Either<InfusioError, AffiliateCommissionList>> SearchCommissions(long? affiliateId = default, int? offset = default, int? limit = default, string until = default, string since = default) =>
            HttpWorkflow<AffiliateCommissionList>(
                message: Request(HttpMethod.Get, MakeUri($"/affiliates/commissions", RequestParameter("affiliateId", affiliateId), RequestParameter("offset", offset), RequestParameter("limit", limit), RequestParameter("until", until), RequestParameter("since", since)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(AffiliateCommissionList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        public Task<Either<InfusioError, ObjectModel>> RetrieveAffiliateModel() =>
            HttpWorkflow<ObjectModel>(
                message: Request(HttpMethod.Get, MakeUri($"/affiliates/model"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(ObjectModel)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Appointments
        /// </summary>
        /// <param name="contactId">Optionally find appointments with a contact</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        /// <param name="until">Date to search to ex. `2017-01-01T22:17:59.039Z`</param>
        /// <param name="since">Date to start searching from ex. `2017-01-01T22:17:59.039Z`</param>
        public Task<Either<InfusioError, AppointmentList>> ListAppointments(long? contactId = default, int? offset = default, int? limit = default, string until = default, string since = default) =>
            HttpWorkflow<AppointmentList>(
                message: Request(HttpMethod.Get, MakeUri($"/appointments", RequestParameter("contactId", contactId), RequestParameter("offset", offset), RequestParameter("limit", limit), RequestParameter("until", until), RequestParameter("since", since)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(AppointmentList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create an Appointment
        /// </summary>
        /// <param name="appointment">appointment</param>
        public Task<Either<InfusioError, Appointment>> CreateAppointment(Model.Appointment appointment) =>
            HttpWorkflow<Appointment>(
                message: Request(HttpMethod.Post, MakeUri($"/appointments"), _config.AccessToken, appointment),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(201, "Created", typeof(Appointment)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve Appointment Model
        /// </summary>
        public Task<Either<InfusioError, ObjectModel>> RetrieveAppointmentModel() =>
            HttpWorkflow<ObjectModel>(
                message: Request(HttpMethod.Get, MakeUri($"/appointments/model"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(ObjectModel)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve an Appointment
        /// </summary>
        /// <param name="appointmentId">appointmentId</param>
        public Task<Either<InfusioError, Appointment>> GetAppointment(long? appointmentId) =>
            HttpWorkflow<Appointment>(
                message: Request(HttpMethod.Get, MakeUri($"/appointments/{appointmentId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Appointment)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Replace an Appointment
        /// </summary>
        /// <param name="appointmentDTO">appointmentDTO</param>
        /// <param name="appointmentId">appointmentId</param>
        public Task<Either<InfusioError, Appointment>> UpdateAppointment(Model.Appointment appointmentDTO, long? appointmentId) =>
            HttpWorkflow<Appointment>(
                message: Request(HttpMethod.Put, MakeUri($"/appointments/{appointmentId}"), _config.AccessToken, appointmentDTO),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Appointment)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Delete an Appointment
        /// </summary>
        /// <param name="appointmentId">appointmentId</param>
        public Task<Either<InfusioError, Unit>> DeleteAppointment(long? appointmentId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Delete, MakeUri($"/appointments/{appointmentId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Update an Appointment
        /// </summary>
        /// <param name="appointmentDTO">appointmentDTO</param>
        /// <param name="appointmentId">appointmentId</param>
        public Task<Either<InfusioError, Appointment>> UpdatePropertiesOnAppointment(Model.Appointment appointmentDTO, long? appointmentId) =>
            HttpWorkflow<Appointment>(
                message: Request(new HttpMethod("Patch"), MakeUri($"/appointments/{appointmentId}"), _config.AccessToken, appointmentDTO),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Appointment)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Campaigns
        /// </summary>
        /// <param name="orderDirection">How to order the data i.e. ascending (A-Z) or descending (Z-A)</param>
        /// <param name="order">Attribute to order items by</param>
        /// <param name="searchText">Optional text to search</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        public Task<Either<InfusioError, CampaignList>> ListCampaigns(string orderDirection = default, string order = default, string searchText = default, int? offset = default, int? limit = default) =>
            HttpWorkflow<CampaignList>(
                message: Request(HttpMethod.Get, MakeUri($"/campaigns", RequestParameter("orderDirection", orderDirection), RequestParameter("order", order), RequestParameter("searchText", searchText), RequestParameter("offset", offset), RequestParameter("limit", limit)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(CampaignList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve a Campaign
        /// </summary>
        /// <param name="campaignId">campaignId</param>
        /// <param name="optionalProperties">Comma-delimited list of Campaign properties to include in the response. (The fields `goals` and `sequences` aren't included, by default.)</param>
        public Task<Either<InfusioError, Campaign>> GetCampaign(long? campaignId, Lst<string> optionalProperties = default) =>
            HttpWorkflow<Campaign>(
                message: Request(HttpMethod.Get, MakeUri($"/campaigns/{campaignId}", RequestParameter("optionalProperties", optionalProperties)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Campaign)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Add Multiple to Campaign Sequence
        /// </summary>
        /// <param name="ids">ids</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <param name="campaignId">campaignId</param>
        public Task<Either<InfusioError, Unit>> AddContactsToCampaignSequence(Model.SetOfIds ids, long? sequenceId, long? campaignId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Post, MakeUri($"/campaigns/{campaignId}/sequences/{sequenceId}/contacts"), _config.AccessToken, ids),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Remove Multiple from Campaign Sequence
        /// </summary>
        /// <param name="ids">ids</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <param name="campaignId">campaignId</param>
        public Task<Either<InfusioError, Unit>> RemoveContactsFromCampaignSequence(Model.SetOfIds ids, long? sequenceId, long? campaignId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Delete, MakeUri($"/campaigns/{campaignId}/sequences/{sequenceId}/contacts"), _config.AccessToken, ids),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Add to Campaign Sequence
        /// </summary>
        /// <param name="contactId">contactId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <param name="campaignId">campaignId</param>
        public Task<Either<InfusioError, Unit>> AddContactToCampaignSequence(long? contactId, long? sequenceId, long? campaignId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Post, MakeUri($"/campaigns/{campaignId}/sequences/{sequenceId}/contacts/{contactId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Remove from Campaign Sequence
        /// </summary>
        /// <param name="contactId">contactId</param>
        /// <param name="sequenceId">sequenceId</param>
        /// <param name="campaignId">campaignId</param>
        public Task<Either<InfusioError, Unit>> RemoveContactFromCampaignSequence(long? contactId, long? sequenceId, long? campaignId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Delete, MakeUri($"/campaigns/{campaignId}/sequences/{sequenceId}/contacts/{contactId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Companies
        /// </summary>
        /// <param name="optionalProperties">Comma-delimited list of Company properties to include in the response. (Fields such as `notes`, `fax_number` and `custom_fields` aren't included, by default.)</param>
        /// <param name="orderDirection">How to order the data i.e. ascending (A-Z) or descending (Z-A)</param>
        /// <param name="order">Attribute to order items by</param>
        /// <param name="companyName">Optional company name to query on</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        public Task<Either<InfusioError, CompanyList>> ListCompanies(Lst<string> optionalProperties = default, string orderDirection = default, string order = default, string companyName = default, int? offset = default, int? limit = default) =>
            HttpWorkflow<CompanyList>(
                message: Request(HttpMethod.Get, MakeUri($"/companies", RequestParameter("optionalProperties", optionalProperties), RequestParameter("orderDirection", orderDirection), RequestParameter("order", order), RequestParameter("companyName", companyName), RequestParameter("offset", offset), RequestParameter("limit", limit)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(CompanyList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create a Company
        /// </summary>
        /// <param name="company">company</param>
        public Task<Either<InfusioError, Company>> CreateCompany(Model.CreateCompany company = default) =>
            HttpWorkflow<Company>(
                message: Request(HttpMethod.Post, MakeUri($"/companies"), _config.AccessToken, company),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(201, "Created", typeof(Company)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve Company Model
        /// </summary>
        public Task<Either<InfusioError, ObjectModel>> RetrieveCompanyModel() =>
            HttpWorkflow<ObjectModel>(
                message: Request(HttpMethod.Get, MakeUri($"/companies/model"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(ObjectModel)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Contacts
        /// </summary>
        /// <param name="orderDirection">How to order the data i.e. ascending (A-Z) or descending (Z-A)</param>
        /// <param name="order">Attribute to order items by</param>
        /// <param name="familyName">Optional last name or surname to query on</param>
        /// <param name="givenName">Optional first name or forename to query on</param>
        /// <param name="email">Optional email address to query on</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        public Task<Either<InfusioError, ContactList>> ListContacts(string orderDirection = default, string order = default, string familyName = default, string givenName = default, string email = default, int? offset = default, int? limit = default) =>
            HttpWorkflow<ContactList>(
                message: Request(HttpMethod.Get, MakeUri($"/contacts", RequestParameter("orderDirection", orderDirection), RequestParameter("order", order), RequestParameter("familyName", familyName), RequestParameter("givenName", givenName), RequestParameter("email", email), RequestParameter("offset", offset), RequestParameter("limit", limit)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(ContactList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create a Contact
        /// </summary>
        /// <param name="contact">contact</param>
        public Task<Either<InfusioError, FullContact>> CreateContact(Model.RequestContact contact = default) =>
            HttpWorkflow<FullContact>(
                message: Request(HttpMethod.Post, MakeUri($"/contacts"), _config.AccessToken, contact),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(201, "Created", typeof(FullContact)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create or Update a Contact
        /// </summary>
        /// <param name="contact">contact</param>
        public Task<Either<InfusioError, FullContact>> CreateOrUpdateContact(Model.UpsertContact contact = default) =>
            HttpWorkflow<FullContact>(
                message: Request(HttpMethod.Put, MakeUri($"/contacts"), _config.AccessToken, contact),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(FullContact)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve Contact Model
        /// </summary>
        public Task<Either<InfusioError, ObjectModel>> RetrieveContactModel() =>
            HttpWorkflow<ObjectModel>(
                message: Request(HttpMethod.Get, MakeUri($"/contacts/model"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(ObjectModel)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Delete a Contact
        /// </summary>
        /// <param name="contactId">contactId</param>
        public Task<Either<InfusioError, Unit>> DeleteContact(long? contactId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Delete, MakeUri($"/contacts/{contactId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Update a Contact
        /// </summary>
        /// <param name="contactId">contactId</param>
        /// <param name="contact">contact</param>
        public Task<Either<InfusioError, FullContact>> UpdatePropertiesOnContact(long? contactId, Model.RequestContact contact = default) =>
            HttpWorkflow<FullContact>(
                message: Request(new HttpMethod("Patch"), MakeUri($"/contacts/{contactId}"), _config.AccessToken, contact),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(FullContact)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create a Credit Card
        /// </summary>
        /// <param name="contactId">contactId</param>
        /// <param name="creditCard">creditCard</param>
        public Task<Either<InfusioError, CreditCardAdded>> CreateCreditCard(long? contactId, Model.CreditCard creditCard = default) =>
            HttpWorkflow<CreditCardAdded>(
                message: Request(HttpMethod.Post, MakeUri($"/contacts/{contactId}/creditCards"), _config.AccessToken, creditCard),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(201, "Created", typeof(CreditCardAdded)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Emails
        /// </summary>
        /// <param name="contactId">contactId</param>
        /// <param name="email">Optional email address to query on</param>
        /// <param name="contactId2">Optional Contact Id to find Emails for</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        public Task<Either<InfusioError, EmailSentQueryResultList>> ListEmailsForContact(long? contactId, string email = default, long? contactId2 = default, int? offset = default, int? limit = default) =>
            HttpWorkflow<EmailSentQueryResultList>(
                message: Request(HttpMethod.Get, MakeUri($"/contacts/{contactId}/emails", RequestParameter("email", email), RequestParameter("contactId2", contactId2), RequestParameter("offset", offset), RequestParameter("limit", limit)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(EmailSentQueryResultList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create an Email Record
        /// </summary>
        /// <param name="contactId">contactId</param>
        /// <param name="emailWithContent">Email records to persist, with content.</param>
        public Task<Either<InfusioError, EmailSentCreate>> CreateEmailForContact(long? contactId, Model.EmailSentCreate emailWithContent = default) =>
            HttpWorkflow<EmailSentCreate>(
                message: Request(HttpMethod.Post, MakeUri($"/contacts/{contactId}/emails"), _config.AccessToken, emailWithContent),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(201, "Created", typeof(EmailSentCreate)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Applied Tags
        /// </summary>
        /// <param name="contactId">contactId</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        public Task<Either<InfusioError, ContactTagList>> ListAppliedTags(long? contactId, int? offset = default, int? limit = default) =>
            HttpWorkflow<ContactTagList>(
                message: Request(HttpMethod.Get, MakeUri($"/contacts/{contactId}/tags", RequestParameter("offset", offset), RequestParameter("limit", limit)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(ContactTagList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Apply Tags
        /// </summary>
        /// <param name="tagIds">tagIds</param>
        /// <param name="contactId">contactId</param>
        public Task<Either<InfusioError, Unit>> ApplyTagsToContactId(Model.TagId tagIds, long? contactId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Post, MakeUri($"/contacts/{contactId}/tags"), _config.AccessToken, tagIds),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Unit)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Remove Applied Tags
        /// </summary>
        /// <param name="ids">ids</param>
        /// <param name="contactId">contactId</param>
        public Task<Either<InfusioError, Unit>> RemoveTagsFromContact(string ids, long? contactId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Delete, MakeUri($"/contacts/{contactId}/tags", RequestParameter("ids", ids)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Remove Applied Tag
        /// </summary>
        /// <param name="tagId">tagId</param>
        /// <param name="contactId">contactId</param>
        public Task<Either<InfusioError, Unit>> RemoveTagsFromContact2(long? tagId, long? contactId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Delete, MakeUri($"/contacts/{contactId}/tags/{tagId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve a Contact
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="optionalProperties">Comma-delimited list of Contact properties to include in the response. (Some fields such as `lead_source_id`, `custom_fields`, and `job_title` aren't included, by default.)</param>
        public Task<Either<InfusioError, FullContact>> GetContact(long? id, Lst<string> optionalProperties = default) =>
            HttpWorkflow<FullContact>(
                message: Request(HttpMethod.Get, MakeUri($"/contacts/{id}", RequestParameter("optionalProperties", optionalProperties)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(FullContact)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Emails
        /// </summary>
        /// <param name="email">Optional email address to query on</param>
        /// <param name="contactId">Optional Contact Id to find Emails for</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        public Task<Either<InfusioError, EmailSentQueryResultList>> ListEmails(string email = default, long? contactId = default, int? offset = default, int? limit = default) =>
            HttpWorkflow<EmailSentQueryResultList>(
                message: Request(HttpMethod.Get, MakeUri($"/emails", RequestParameter("email", email), RequestParameter("contactId", contactId), RequestParameter("offset", offset), RequestParameter("limit", limit)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(EmailSentQueryResultList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create an Email Record
        /// </summary>
        /// <param name="emailWithContent">Email records to persist, with content.</param>
        public Task<Either<InfusioError, EmailSentCreate>> CreateEmail(Model.EmailSentCreate emailWithContent = default) =>
            HttpWorkflow<EmailSentCreate>(
                message: Request(HttpMethod.Post, MakeUri($"/emails"), _config.AccessToken, emailWithContent),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(201, "Created", typeof(EmailSentCreate)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create a set of Email Records
        /// </summary>
        /// <param name="emailWithContent">Email records to persist, with content.</param>
        public Task<Either<InfusioError, EmailSentCreateList>> CreateEmails(Model.EmailSentCreateList emailWithContent = default) =>
            HttpWorkflow<EmailSentCreateList>(
                message: Request(HttpMethod.Post, MakeUri($"/emails/sync"), _config.AccessToken, emailWithContent),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(201, "Created", typeof(EmailSentCreateList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Un-sync a batch of Email Records
        /// </summary>
        /// <param name="emailIds">emailIds</param>
        public Task<Either<InfusioError, Unit>> DeleteEmails(Model.SetOfIds emailIds) =>
            HttpWorkflow(
                message: Request(HttpMethod.Post, MakeUri($"/emails/unsync"), _config.AccessToken, emailIds),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Unit)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve an Email
        /// </summary>
        /// <param name="id">id</param>
        public Task<Either<InfusioError, EmailSentQueryResultWithContent>> GetEmail(long? id) =>
            HttpWorkflow<EmailSentQueryResultWithContent>(
                message: Request(HttpMethod.Get, MakeUri($"/emails/{id}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(EmailSentQueryResultWithContent)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Update an Email Record
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="emailWithContent">Email records to persist, with content.</param>
        public Task<Either<InfusioError, EmailSentCreate>> UpdateEmail(long? id, Model.EmailSentCreate emailWithContent = default) =>
            HttpWorkflow<EmailSentCreate>(
                message: Request(HttpMethod.Put, MakeUri($"/emails/{id}"), _config.AccessToken, emailWithContent),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(EmailSentCreate)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Delete an Email Record
        /// </summary>
        /// <param name="id">id</param>
        public Task<Either<InfusioError, Unit>> DeleteEmail(long? id) =>
            HttpWorkflow(
                message: Request(HttpMethod.Delete, MakeUri($"/emails/{id}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Files
        /// </summary>
        /// <param name="name">Filter files based on name, with '*' preceding or following to indicate LIKE queries.</param>
        /// <param name="type">Filter based on the type of file.</param>
        /// <param name="permission">Filter based on the permission of files (USER or COMPANY), defaults to BOTH.</param>
        /// <param name="viewable">Include public or private files in response (PUBLIC or PRIVATE), defaults to BOTH.</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        public Task<Either<InfusioError, FileList>> ListFiles(string name = default, string type = default, string permission = default, string viewable = default, int? offset = default, int? limit = default) =>
            HttpWorkflow<FileList>(
                message: Request(HttpMethod.Get, MakeUri($"/files", RequestParameter("name", name), RequestParameter("type", type), RequestParameter("permission", permission), RequestParameter("viewable", viewable), RequestParameter("offset", offset), RequestParameter("limit", limit)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(FileList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Upload File
        /// </summary>
        /// <param name="fileUpload">fileUploadDTO</param>
        public Task<Either<InfusioError, FileInformation>> CreateFile(Model.FileUpload fileUpload = default) =>
            HttpWorkflow<FileInformation>(
                message: Request(HttpMethod.Post, MakeUri($"/files"), _config.AccessToken, fileUpload),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(FileInformation)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve File
        /// </summary>
        /// <param name="fileId">fileId</param>
        /// <param name="optionalProperties">Comma-delimited list of File properties to include in the response. (Some fields such as `file_data` aren't included, by default.)</param>
        public Task<Either<InfusioError, FileInformation>> GetFile(long? fileId, Lst<string> optionalProperties = default) =>
            HttpWorkflow<FileInformation>(
                message: Request(HttpMethod.Get, MakeUri($"/files/{fileId}", RequestParameter("optionalProperties", optionalProperties)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(FileInformation)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Replace File
        /// </summary>
        /// <param name="fileId">fileId</param>
        /// <param name="fileUpload">fileUpload</param>
        public Task<Either<InfusioError, FileInformation>> UpdateFile(long? fileId, Model.FileUpload fileUpload = default) =>
            HttpWorkflow<FileInformation>(
                message: Request(HttpMethod.Put, MakeUri($"/files/{fileId}"), _config.AccessToken, fileUpload),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(FileInformation)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Delete File
        /// </summary>
        /// <param name="fileId">fileId</param>
        public Task<Either<InfusioError, Unit>> DeleteFile(long? fileId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Delete, MakeUri($"/files/{fileId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Stored Hook Subscriptions
        /// </summary>
        public Task<Either<InfusioError, Unit>> ListStoredHookSubscriptions() =>
            HttpWorkflow(
                message: Request(HttpMethod.Get, MakeUri($"/hooks"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Unit)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create a Hook Subscription
        /// </summary>
        /// <param name="restHookRequest">restHookRequest</param>
        public Task<Either<InfusioError, RestHook>> CreateAHookSubscription(Model.RestHookRequest restHookRequest) =>
            HttpWorkflow<RestHook>(
                message: Request(HttpMethod.Post, MakeUri($"/hooks"), _config.AccessToken, restHookRequest),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(RestHook)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Hook Event Types
        /// </summary>
        public Task<Either<InfusioError, Unit>> ListHookEventTypes() =>
            HttpWorkflow(
                message: Request(HttpMethod.Get, MakeUri($"/hooks/event_keys"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Unit)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve a Hook Subscription
        /// </summary>
        /// <param name="key">key</param>
        public Task<Either<InfusioError, RestHook>> RetrieveAHookSubscription(string key) =>
            HttpWorkflow<RestHook>(
                message: Request(HttpMethod.Get, MakeUri($"/hooks/{key}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(RestHook)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Update a Hook Subscription
        /// </summary>
        /// <param name="restHookRequest">restHookRequest</param>
        /// <param name="key">key</param>
        public Task<Either<InfusioError, RestHook>> UpdateAHookSubscription(Model.RestHookRequest restHookRequest, string key) =>
            HttpWorkflow<RestHook>(
                message: Request(HttpMethod.Put, MakeUri($"/hooks/{key}"), _config.AccessToken, restHookRequest),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(RestHook)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Delete a Hook Subscription
        /// </summary>
        /// <param name="key">key</param>
        public Task<Either<InfusioError, Unit>> DeleteAHookSubscription(string key) =>
            HttpWorkflow(
                message: Request(HttpMethod.Delete, MakeUri($"/hooks/{key}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Verify a Hook Subscription, Delayed
        /// </summary>
        /// <param name="xHookSecret">X-Hook-Secret</param>
        /// <param name="key">key</param>
        public Task<Either<InfusioError, RestHook>> VerifyAHookSubscriptionDelayed(string xHookSecret, string key) =>
            HttpWorkflow<RestHook>(
                message: Request(HttpMethod.Post, MakeUri($"/hooks/{key}/delayedVerify"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(RestHook)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Verify a Hook Subscription
        /// </summary>
        /// <param name="key">key</param>
        public Task<Either<InfusioError, RestHook>> VerifyAHookSubscription(string key) =>
            HttpWorkflow<RestHook>(
                message: Request(HttpMethod.Post, MakeUri($"/hooks/{key}/verify"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(RestHook)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve User Info
        /// </summary>
        public Task<Either<InfusioError, UserInfoDTO>> GetUserInfo() =>
            HttpWorkflow<UserInfoDTO>(
                message: Request(HttpMethod.Get, MakeUri($"/oauth/connect/userinfo"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(UserInfoDTO)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Opportunities
        /// </summary>
        /// <param name="order">Attribute to order items by</param>
        /// <param name="searchTerm">Returns opportunities that match any of the contact's `given_name`, `family_name`, `company_name`, and `email_addresses` (searches `EMAIL1` only) fields as well as `opportunity_title`</param>
        /// <param name="stageId">Returns opportunities for the provided stage id</param>
        /// <param name="userId">Returns opportunities for the provided user id</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        public Task<Either<InfusioError, OpportunityList>> ListOpportunities(string order = default, string searchTerm = default, long? stageId = default, long? userId = default, int? offset = default, int? limit = default) =>
            HttpWorkflow<OpportunityList>(
                message: Request(HttpMethod.Get, MakeUri($"/opportunities", RequestParameter("order", order), RequestParameter("searchTerm", searchTerm), RequestParameter("stageId", stageId), RequestParameter("userId", userId), RequestParameter("offset", offset), RequestParameter("limit", limit)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(OpportunityList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create an Opportunity
        /// </summary>
        /// <param name="opportunity">opportunity</param>
        public Task<Either<InfusioError, Opportunity>> CreateOpportunity(Model.Opportunity opportunity = default) =>
            HttpWorkflow<Opportunity>(
                message: Request(HttpMethod.Post, MakeUri($"/opportunities"), _config.AccessToken, opportunity),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Opportunity)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Replace an Opportunity
        /// </summary>
        /// <param name="opportunity">opportunity</param>
        public Task<Either<InfusioError, Opportunity>> UpdateOpportunity(Model.Opportunity opportunity = default) =>
            HttpWorkflow<Opportunity>(
                message: Request(HttpMethod.Put, MakeUri($"/opportunities"), _config.AccessToken, opportunity),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Opportunity)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve Opportunity Model
        /// </summary>
        public Task<Either<InfusioError, ObjectModel>> RetrieveOpportunityModel() =>
            HttpWorkflow<ObjectModel>(
                message: Request(HttpMethod.Get, MakeUri($"/opportunities/model"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(ObjectModel)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve an Opportunity
        /// </summary>
        /// <param name="opportunityId">opportunityId</param>
        /// <param name="optionalProperties">Comma-delimited list of Opportunity properties to include in the response. (Some fields such as `custom_fields` aren't included, by default.)</param>
        public Task<Either<InfusioError, Opportunity>> GetOpportunity(long? opportunityId, Lst<string> optionalProperties = default) =>
            HttpWorkflow<Opportunity>(
                message: Request(HttpMethod.Get, MakeUri($"/opportunities/{opportunityId}", RequestParameter("optionalProperties", optionalProperties)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Opportunity)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Update an Opportunity
        /// </summary>
        /// <param name="opportunityId">opportunityId</param>
        /// <param name="opportunity">opportunity</param>
        public Task<Either<InfusioError, Opportunity>> UpdatePropertiesOnOpportunity(long? opportunityId, Model.Opportunity opportunity = default) =>
            HttpWorkflow<Opportunity>(
                message: Request(new HttpMethod("Patch"), MakeUri($"/opportunities/{opportunityId}"), _config.AccessToken, opportunity),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Opportunity)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Opportunity Stage Pipeline
        /// </summary>
        public Task<Either<InfusioError, Unit>> ListOpportunityStagePipelines() =>
            HttpWorkflow(
                message: Request(HttpMethod.Get, MakeUri($"/opportunity/stage_pipeline"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Unit)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Orders
        /// </summary>
        /// <param name="productId">Returns orders containing the provided product id</param>
        /// <param name="contactId">Returns orders for the provided contact id</param>
        /// <param name="order">Attribute to order items by</param>
        /// <param name="paid">Sets paid status of items to return</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        /// <param name="until">Date to search to ex. `2017-01-01T22:17:59.039Z`</param>
        /// <param name="since">Date to start searching from ex. `2017-01-01T22:17:59.039Z`</param>
        public Task<Either<InfusioError, OrderList>> ListOrders(long? productId = default, long? contactId = default, string order = default, bool paid = default, int? offset = default, int? limit = default, string until = default, string since = default) =>
            HttpWorkflow<OrderList>(
                message: Request(HttpMethod.Get, MakeUri($"/orders", RequestParameter("productId", productId), RequestParameter("contactId", contactId), RequestParameter("order", order), RequestParameter("paid", paid), RequestParameter("offset", offset), RequestParameter("limit", limit), RequestParameter("until", until), RequestParameter("since", since)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(OrderList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve Custom Order Model
        /// </summary>
        public Task<Either<InfusioError, ObjectModel>> RetrieveOrderModel() =>
            HttpWorkflow<ObjectModel>(
                message: Request(HttpMethod.Get, MakeUri($"/orders/model"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(ObjectModel)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve an Order
        /// </summary>
        /// <param name="orderId">orderId</param>
        public Task<Either<InfusioError, Order>> GetOrder(long? orderId) =>
            HttpWorkflow<Order>(
                message: Request(HttpMethod.Get, MakeUri($"/orders/{orderId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Order)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve Order Transactions
        /// </summary>
        /// <param name="orderId">orderId</param>
        /// <param name="contactId">Returns transactions for the provided contact id</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        /// <param name="until">Date to search to ex. `2017-01-01T22:17:59.039Z`</param>
        /// <param name="since">Date to start searching from ex. `2017-01-01T22:17:59.039Z`</param>
        public Task<Either<InfusioError, TransactionList>> ListTransactionsForOrder(long? orderId, long? contactId = default, int? offset = default, int? limit = default, string until = default, string since = default) =>
            HttpWorkflow<TransactionList>(
                message: Request(HttpMethod.Get, MakeUri($"/orders/{orderId}/transactions", RequestParameter("contactId", contactId), RequestParameter("offset", offset), RequestParameter("limit", limit), RequestParameter("until", until), RequestParameter("since", since)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(TransactionList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Products
        /// </summary>
        /// <param name="active">Sets status of items to return</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        public Task<Either<InfusioError, ProductList>> ListProducts(bool active = default, int? offset = default, int? limit = default) =>
            HttpWorkflow<ProductList>(
                message: Request(HttpMethod.Get, MakeUri($"/products", RequestParameter("active", active), RequestParameter("offset", offset), RequestParameter("limit", limit)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(ProductList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve Synced Products
        /// </summary>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        /// <param name="syncToken">sync_token</param>
        public Task<Either<InfusioError, ProductStatusList>> ListProductsFromSyncToken(int? offset = default, int? limit = default, string syncToken = default) =>
            HttpWorkflow<ProductStatusList>(
                message: Request(HttpMethod.Get, MakeUri($"/products/sync", RequestParameter("offset", offset), RequestParameter("limit", limit), RequestParameter("syncToken", syncToken)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(ProductStatusList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve a Product
        /// </summary>
        /// <param name="productId">productId</param>
        public Task<Either<InfusioError, Product>> GetProduct(long? productId) =>
            HttpWorkflow<Product>(
                message: Request(HttpMethod.Get, MakeUri($"/products/{productId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Product)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve application status
        /// </summary>
        public Task<Either<InfusioError, Setting>> GetApplicationEnabled() =>
            HttpWorkflow<Setting>(
                message: Request(HttpMethod.Get, MakeUri($"/setting/application/enabled"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Setting)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Contact types
        /// </summary>
        public Task<Either<InfusioError, Setting>> GetContactOptionTypes() =>
            HttpWorkflow<Setting>(
                message: Request(HttpMethod.Get, MakeUri($"/setting/contact/optionTypes"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Setting)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve Subscription Model
        /// </summary>
        public Task<Either<InfusioError, ObjectModel>> RetrieveSubscriptionModel() =>
            HttpWorkflow<ObjectModel>(
                message: Request(HttpMethod.Get, MakeUri($"/subscriptions/model"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(ObjectModel)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Tags
        /// </summary>
        /// <param name="category">Category Id of tags to filter by</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        public Task<Either<InfusioError, Tags>> ListTags(long? category = default, int? offset = default, int? limit = default) =>
            HttpWorkflow<Tags>(
                message: Request(HttpMethod.Get, MakeUri($"/tags", RequestParameter("category", category), RequestParameter("offset", offset), RequestParameter("limit", limit)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Tags)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create Tag
        /// </summary>
        /// <param name="tag">tag</param>
        public Task<Either<InfusioError, Tag>> CreateTag(Model.CreateTag tag) =>
            HttpWorkflow<Tag>(
                message: Request(HttpMethod.Post, MakeUri($"/tags"), _config.AccessToken, tag),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Tag)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create Tag Category
        /// </summary>
        /// <param name="tagCategory">tagCategory</param>
        public Task<Either<InfusioError, TagCategory>> CreateTagCategory(Model.CreateTagCategory tagCategory) =>
            HttpWorkflow<TagCategory>(
                message: Request(HttpMethod.Post, MakeUri($"/tags/categories"), _config.AccessToken, tagCategory),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(TagCategory)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve a Tag
        /// </summary>
        /// <param name="id">id</param>
        public Task<Either<InfusioError, Tag>> GetTag(long? id) =>
            HttpWorkflow<Tag>(
                message: Request(HttpMethod.Get, MakeUri($"/tags/{id}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Tag)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Tagged Contacts
        /// </summary>
        /// <param name="tagId">tagId</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        public Task<Either<InfusioError, TaggedContactList>> ListContactsForTagId(long? tagId, int? offset = default, int? limit = default) =>
            HttpWorkflow<TaggedContactList>(
                message: Request(HttpMethod.Get, MakeUri($"/tags/{tagId}/contacts", RequestParameter("offset", offset), RequestParameter("limit", limit)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(TaggedContactList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Apply Tag to Contacts
        /// </summary>
        /// <param name="ids">ids</param>
        /// <param name="tagId">tagId</param>
        public Task<Either<InfusioError, Unit>> ApplyTagToContactIds(Model.SetOfIds ids, long? tagId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Post, MakeUri($"/tags/{tagId}/contacts"), _config.AccessToken, ids),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Unit)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Remove Tag from Contacts
        /// </summary>
        /// <param name="ids">ids</param>
        /// <param name="tagId">tagId</param>
        public Task<Either<InfusioError, Unit>> RemoveTagFromContactIds(Lst<long> ids, long? tagId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Delete, MakeUri($"/tags/{tagId}/contacts", RequestParameter("ids", ids)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Remove Tag from Contact
        /// </summary>
        /// <param name="contactId">contactId</param>
        /// <param name="tagId">tagId</param>
        public Task<Either<InfusioError, Unit>> RemoveTagFromContactId(long? contactId, long? tagId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Delete, MakeUri($"/tags/{tagId}/contacts/{contactId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Tasks
        /// </summary>
        /// <param name="order">Attribute to order items by</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        /// <param name="completed">Sets completed status of items to return</param>
        /// <param name="until">Date to search to ex. `2017-01-01T22:17:59.039Z`</param>
        /// <param name="since">Date to start searching from ex. `2017-01-01T22:17:59.039Z`</param>
        /// <param name="userId">user_id</param>
        /// <param name="hasDueDate">has_due_date</param>
        /// <param name="contactId">contact_id</param>
        public Task<Either<InfusioError, TaskList>> ListTasks(string order = default, int? offset = default, int? limit = default, bool completed = default, string until = default, string since = default, long? userId = default, bool hasDueDate = default, long? contactId = default) =>
            HttpWorkflow<TaskList>(
                message: Request(HttpMethod.Get, MakeUri($"/tasks", RequestParameter("order", order), RequestParameter("offset", offset), RequestParameter("limit", limit), RequestParameter("completed", completed), RequestParameter("until", until), RequestParameter("since", since), RequestParameter("userId", userId), RequestParameter("hasDueDate", hasDueDate), RequestParameter("contactId", contactId)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(TaskList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Create a Task
        /// </summary>
        /// <param name="task">task</param>
        public Task<Either<InfusioError, InfusionTask>> CreateTask(Model.InfusionTask task) =>
            HttpWorkflow<InfusionTask>(
                message: Request(HttpMethod.Post, MakeUri($"/tasks"), _config.AccessToken, task),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(InfusionTask)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve Task Model
        /// </summary>
        public Task<Either<InfusioError, ObjectModel>> RetrieveTaskModel() =>
            HttpWorkflow<ObjectModel>(
                message: Request(HttpMethod.Get, MakeUri($"/tasks/model"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(ObjectModel)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Search Tasks
        /// </summary>
        /// <param name="order">Attribute to order items by</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        /// <param name="completed">Sets completed status of items to return</param>
        /// <param name="until">Date to search to ex. `2017-01-01T22:17:59.039Z`</param>
        /// <param name="since">Date to start searching from ex. `2017-01-01T22:17:59.039Z`</param>
        /// <param name="userId">Returns tasks for the provided user id</param>
        /// <param name="hasDueDate">Returns tasks that have an 'action date' when set to true</param>
        /// <param name="contactId">Returns tasks for the provided contact id</param>
        public Task<Either<InfusioError, TaskList>> ListTasksForCurrentUser(string order = default, int? offset = default, int? limit = default, bool completed = default, string until = default, string since = default, long? userId = default, bool hasDueDate = default, long? contactId = default) =>
            HttpWorkflow<TaskList>(
                message: Request(HttpMethod.Get, MakeUri($"/tasks/search", RequestParameter("order", order), RequestParameter("offset", offset), RequestParameter("limit", limit), RequestParameter("completed", completed), RequestParameter("until", until), RequestParameter("since", since), RequestParameter("userId", userId), RequestParameter("hasDueDate", hasDueDate), RequestParameter("contactId", contactId)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(TaskList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve a Task
        /// </summary>
        /// <param name="taskId">taskId</param>
        public Task<Either<InfusioError, InfusionTask>> GetTask(string taskId) =>
            HttpWorkflow<InfusionTask>(
                message: Request(HttpMethod.Get, MakeUri($"/tasks/{taskId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(InfusionTask)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Replace a Task
        /// </summary>
        /// <param name="task">task</param>
        /// <param name="taskId">taskId</param>
        public Task<Either<InfusioError, InfusionTask>> UpdateTask(Model.InfusionTask task, string taskId) =>
            HttpWorkflow<InfusionTask>(
                message: Request(HttpMethod.Put, MakeUri($"/tasks/{taskId}"), _config.AccessToken, task),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(InfusionTask)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Delete a Task
        /// </summary>
        /// <param name="taskId">taskId</param>
        public Task<Either<InfusioError, Unit>> DeleteTask(string taskId) =>
            HttpWorkflow(
                message: Request(HttpMethod.Delete, MakeUri($"/tasks/{taskId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(204, "No Content", typeof(Unit)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Update a Task
        /// </summary>
        /// <param name="task">task</param>
        /// <param name="taskId">taskId</param>
        public Task<Either<InfusioError, InfusionTask>> UpdatePropertiesOnTask(Model.InfusionTask task, string taskId) =>
            HttpWorkflow<InfusionTask>(
                message: Request(new HttpMethod("Patch"), MakeUri($"/tasks/{taskId}"), _config.AccessToken, task),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(InfusionTask)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// List Transactions
        /// </summary>
        /// <param name="contactId">Returns transactions for the provided contact id</param>
        /// <param name="offset">Sets a beginning range of items to return</param>
        /// <param name="limit">Sets a total of items to return</param>
        /// <param name="until">Date to search to ex. `2017-01-01T22:17:59.039Z`</param>
        /// <param name="since">Date to start searching from ex. `2017-01-01T22:17:59.039Z`</param>
        public Task<Either<InfusioError, TransactionList>> ListTransactions(long? contactId = default, int? offset = default, int? limit = default, string until = default, string since = default) =>
            HttpWorkflow<TransactionList>(
                message: Request(HttpMethod.Get, MakeUri($"/transactions", RequestParameter("contactId", contactId), RequestParameter("offset", offset), RequestParameter("limit", limit), RequestParameter("until", until), RequestParameter("since", since)), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(TransactionList)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

        /// <summary>
        /// Retrieve a Transaction
        /// </summary>
        /// <param name="transactionId">transactionId</param>
        public Task<Either<InfusioError, Transaction>> GetTransaction(long? transactionId) =>
            HttpWorkflow<Transaction>(
                message: Request(HttpMethod.Get, MakeUri($"/transactions/{transactionId}"), _config.AccessToken),
                responses: HashSet<KnownResponse.Eq, KnownResponse>(
                    new KnownResponse(200, "OK", typeof(Transaction)),
                    new KnownResponse(401, "Unauthorized", typeof(Error)),
                    new KnownResponse(403, "Forbidden", typeof(Error)),
                    new KnownResponse(404, "Not Found", typeof(Error))
            ))(_client);

    }
}