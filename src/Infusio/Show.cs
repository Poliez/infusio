//----------------------
// <auto-generated>
// </auto-generated>
//----------------------
using System;
using Infusio.Http;
using Infusio.Model;
using LanguageExt;
using Newtonsoft.Json;

namespace Infusio
{
    using static Prelude;
    using static JsonConvert;
    using static InfusioClient;

    public delegate string Show<out T>();

    internal static class ShowExtensions
    {
        public static Show<T> AsShow<T>(this T self) => self.ToString;
        public static Show<T> AsShow<T>(this T self, Func<T, string> fn) => () => fn(self);

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.Log op) => () => op.Message;

        public static Show<InfusioOp<AccountProfile>> AsShow<T>(this InfusioOp<T>.GetAccountProfile op) => () =>
        {
            var uri = MakeUri($"/account/profile");
            var body = MakeBody();
            return body.Fold($"Retrieve account profile. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<AccountProfile>> AsShow<T>(this InfusioOp<T>.UpdateAccountInfo op) => () =>
        {
            var uri = MakeUri($"/account/profile");
            var body = MakeBody(op.AccountInfo);
            return body.Fold($"Updates an account profile. [PUT: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<AffiliateCommissionList>> AsShow<T>(this InfusioOp<T>.SearchCommissions op) => () =>
        {
            var uri = MakeUri($"/affiliates/commissions", RequestParameter("affiliateId", op.AffiliateId), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("until", op.Until), RequestParameter("since", op.Since));
            var body = MakeBody();
            return body.Fold($"Retrieve Commissions. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<ObjectModel>> AsShow<T>(this InfusioOp<T>.RetrieveAffiliateModel op) => () =>
        {
            var uri = MakeUri($"/affiliates/model");
            var body = MakeBody();
            return body.Fold($"Retrieve Affiliate Model. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<AppointmentList>> AsShow<T>(this InfusioOp<T>.ListAppointments op) => () =>
        {
            var uri = MakeUri($"/appointments", RequestParameter("contactId", op.ContactId), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("until", op.Until), RequestParameter("since", op.Since));
            var body = MakeBody();
            return body.Fold($"List Appointments. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Appointment>> AsShow<T>(this InfusioOp<T>.CreateAppointment op) => () =>
        {
            var uri = MakeUri($"/appointments");
            var body = MakeBody(op.Appointment);
            return body.Fold($"Create an Appointment. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<ObjectModel>> AsShow<T>(this InfusioOp<T>.RetrieveAppointmentModel op) => () =>
        {
            var uri = MakeUri($"/appointments/model");
            var body = MakeBody();
            return body.Fold($"Retrieve Appointment Model. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Appointment>> AsShow<T>(this InfusioOp<T>.GetAppointment op) => () =>
        {
            var uri = MakeUri($"/appointments/{op.AppointmentId}");
            var body = MakeBody();
            return body.Fold($"Retrieve an Appointment. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Appointment>> AsShow<T>(this InfusioOp<T>.UpdateAppointment op) => () =>
        {
            var uri = MakeUri($"/appointments/{op.AppointmentId}");
            var body = MakeBody(op.AppointmentDTO);
            return body.Fold($"Replace an Appointment. [PUT: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.DeleteAppointment op) => () =>
        {
            var uri = MakeUri($"/appointments/{op.AppointmentId}");
            var body = MakeBody();
            return body.Fold($"Delete an Appointment. [DELETE: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Appointment>> AsShow<T>(this InfusioOp<T>.UpdatePropertiesOnAppointment op) => () =>
        {
            var uri = MakeUri($"/appointments/{op.AppointmentId}");
            var body = MakeBody(op.AppointmentDTO);
            return body.Fold($"Update an Appointment. [PATCH: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<CampaignList>> AsShow<T>(this InfusioOp<T>.ListCampaigns op) => () =>
        {
            var uri = MakeUri($"/campaigns", RequestParameter("orderDirection", op.OrderDirection), RequestParameter("order", op.Order), RequestParameter("searchText", op.SearchText), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit));
            var body = MakeBody();
            return body.Fold($"List Campaigns. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Campaign>> AsShow<T>(this InfusioOp<T>.GetCampaign op) => () =>
        {
            var uri = MakeUri($"/campaigns/{op.CampaignId}", RequestParameter("optionalProperties", op.OptionalProperties));
            var body = MakeBody();
            return body.Fold($"Retrieve a Campaign. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.AddContactsToCampaignSequence op) => () =>
        {
            var uri = MakeUri($"/campaigns/{op.CampaignId}/sequences/{op.SequenceId}/contacts");
            var body = MakeBody(op.Ids);
            return body.Fold($"Add Multiple to Campaign Sequence. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.RemoveContactsFromCampaignSequence op) => () =>
        {
            var uri = MakeUri($"/campaigns/{op.CampaignId}/sequences/{op.SequenceId}/contacts");
            var body = MakeBody(op.Ids);
            return body.Fold($"Remove Multiple from Campaign Sequence. [DELETE: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.AddContactToCampaignSequence op) => () =>
        {
            var uri = MakeUri($"/campaigns/{op.CampaignId}/sequences/{op.SequenceId}/contacts/{op.ContactId}");
            var body = MakeBody();
            return body.Fold($"Add to Campaign Sequence. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.RemoveContactFromCampaignSequence op) => () =>
        {
            var uri = MakeUri($"/campaigns/{op.CampaignId}/sequences/{op.SequenceId}/contacts/{op.ContactId}");
            var body = MakeBody();
            return body.Fold($"Remove from Campaign Sequence. [DELETE: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<CompanyList>> AsShow<T>(this InfusioOp<T>.ListCompanies op) => () =>
        {
            var uri = MakeUri($"/companies", RequestParameter("optionalProperties", op.OptionalProperties), RequestParameter("orderDirection", op.OrderDirection), RequestParameter("order", op.Order), RequestParameter("companyName", op.CompanyName), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit));
            var body = MakeBody();
            return body.Fold($"List Companies. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Company>> AsShow<T>(this InfusioOp<T>.CreateCompany op) => () =>
        {
            var uri = MakeUri($"/companies");
            var body = MakeBody(op.Company);
            return body.Fold($"Create a Company. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<ObjectModel>> AsShow<T>(this InfusioOp<T>.RetrieveCompanyModel op) => () =>
        {
            var uri = MakeUri($"/companies/model");
            var body = MakeBody();
            return body.Fold($"Retrieve Company Model. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<ContactList>> AsShow<T>(this InfusioOp<T>.ListContacts op) => () =>
        {
            var uri = MakeUri($"/contacts", RequestParameter("orderDirection", op.OrderDirection), RequestParameter("order", op.Order), RequestParameter("familyName", op.FamilyName), RequestParameter("givenName", op.GivenName), RequestParameter("email", op.Email), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit));
            var body = MakeBody();
            return body.Fold($"List Contacts. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<FullContact>> AsShow<T>(this InfusioOp<T>.CreateContact op) => () =>
        {
            var uri = MakeUri($"/contacts");
            var body = MakeBody(op.Contact);
            return body.Fold($"Create a Contact. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<FullContact>> AsShow<T>(this InfusioOp<T>.CreateOrUpdateContact op) => () =>
        {
            var uri = MakeUri($"/contacts");
            var body = MakeBody(op.Contact);
            return body.Fold($"Create or Update a Contact. [PUT: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<ObjectModel>> AsShow<T>(this InfusioOp<T>.RetrieveContactModel op) => () =>
        {
            var uri = MakeUri($"/contacts/model");
            var body = MakeBody();
            return body.Fold($"Retrieve Contact Model. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.DeleteContact op) => () =>
        {
            var uri = MakeUri($"/contacts/{op.ContactId}");
            var body = MakeBody();
            return body.Fold($"Delete a Contact. [DELETE: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<FullContact>> AsShow<T>(this InfusioOp<T>.UpdatePropertiesOnContact op) => () =>
        {
            var uri = MakeUri($"/contacts/{op.ContactId}");
            var body = MakeBody(op.Contact);
            return body.Fold($"Update a Contact. [PATCH: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<CreditCardAdded>> AsShow<T>(this InfusioOp<T>.CreateCreditCard op) => () =>
        {
            var uri = MakeUri($"/contacts/{op.ContactId}/creditCards");
            var body = MakeBody(op.CreditCard);
            return body.Fold($"Create a Credit Card. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<EmailSentQueryResultList>> AsShow<T>(this InfusioOp<T>.ListEmailsForContact op) => () =>
        {
            var uri = MakeUri($"/contacts/{op.ContactId}/emails", RequestParameter("email", op.Email), RequestParameter("contactId2", op.ContactId2), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit));
            var body = MakeBody();
            return body.Fold($"List Emails. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<EmailSentCreate>> AsShow<T>(this InfusioOp<T>.CreateEmailForContact op) => () =>
        {
            var uri = MakeUri($"/contacts/{op.ContactId}/emails");
            var body = MakeBody(op.EmailWithContent);
            return body.Fold($"Create an Email Record. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<ContactTagList>> AsShow<T>(this InfusioOp<T>.ListAppliedTags op) => () =>
        {
            var uri = MakeUri($"/contacts/{op.ContactId}/tags", RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit));
            var body = MakeBody();
            return body.Fold($"List Applied Tags. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.ApplyTagsToContactId op) => () =>
        {
            var uri = MakeUri($"/contacts/{op.ContactId}/tags");
            var body = MakeBody(op.TagIds);
            return body.Fold($"Apply Tags. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.RemoveTagsFromContact op) => () =>
        {
            var uri = MakeUri($"/contacts/{op.ContactId}/tags", RequestParameter("ids", op.Ids));
            var body = MakeBody();
            return body.Fold($"Remove Applied Tags. [DELETE: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.RemoveTagsFromContact2 op) => () =>
        {
            var uri = MakeUri($"/contacts/{op.ContactId}/tags/{op.TagId}");
            var body = MakeBody();
            return body.Fold($"Remove Applied Tag. [DELETE: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<FullContact>> AsShow<T>(this InfusioOp<T>.GetContact op) => () =>
        {
            var uri = MakeUri($"/contacts/{op.Id}", RequestParameter("optionalProperties", op.OptionalProperties));
            var body = MakeBody();
            return body.Fold($"Retrieve a Contact. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<EmailSentQueryResultList>> AsShow<T>(this InfusioOp<T>.ListEmails op) => () =>
        {
            var uri = MakeUri($"/emails", RequestParameter("email", op.Email), RequestParameter("contactId", op.ContactId), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit));
            var body = MakeBody();
            return body.Fold($"List Emails. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<EmailSentCreate>> AsShow<T>(this InfusioOp<T>.CreateEmail op) => () =>
        {
            var uri = MakeUri($"/emails");
            var body = MakeBody(op.EmailWithContent);
            return body.Fold($"Create an Email Record. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<EmailSentCreateList>> AsShow<T>(this InfusioOp<T>.CreateEmails op) => () =>
        {
            var uri = MakeUri($"/emails/sync");
            var body = MakeBody(op.EmailWithContent);
            return body.Fold($"Create a set of Email Records. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.DeleteEmails op) => () =>
        {
            var uri = MakeUri($"/emails/unsync");
            var body = MakeBody(op.EmailIds);
            return body.Fold($"Un-sync a batch of Email Records. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<EmailSentQueryResultWithContent>> AsShow<T>(this InfusioOp<T>.GetEmail op) => () =>
        {
            var uri = MakeUri($"/emails/{op.Id}");
            var body = MakeBody();
            return body.Fold($"Retrieve an Email. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<EmailSentCreate>> AsShow<T>(this InfusioOp<T>.UpdateEmail op) => () =>
        {
            var uri = MakeUri($"/emails/{op.Id}");
            var body = MakeBody(op.EmailWithContent);
            return body.Fold($"Update an Email Record. [PUT: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.DeleteEmail op) => () =>
        {
            var uri = MakeUri($"/emails/{op.Id}");
            var body = MakeBody();
            return body.Fold($"Delete an Email Record. [DELETE: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<FileList>> AsShow<T>(this InfusioOp<T>.ListFiles op) => () =>
        {
            var uri = MakeUri($"/files", RequestParameter("name", op.Name), RequestParameter("type", op.Type), RequestParameter("permission", op.Permission), RequestParameter("viewable", op.Viewable), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit));
            var body = MakeBody();
            return body.Fold($"List Files. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<FileInformation>> AsShow<T>(this InfusioOp<T>.CreateFile op) => () =>
        {
            var uri = MakeUri($"/files");
            var body = MakeBody(op.FileUpload);
            return body.Fold($"Upload File. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<FileInformation>> AsShow<T>(this InfusioOp<T>.GetFile op) => () =>
        {
            var uri = MakeUri($"/files/{op.FileId}", RequestParameter("optionalProperties", op.OptionalProperties));
            var body = MakeBody();
            return body.Fold($"Retrieve File. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<FileInformation>> AsShow<T>(this InfusioOp<T>.UpdateFile op) => () =>
        {
            var uri = MakeUri($"/files/{op.FileId}");
            var body = MakeBody(op.FileUpload);
            return body.Fold($"Replace File. [PUT: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.DeleteFile op) => () =>
        {
            var uri = MakeUri($"/files/{op.FileId}");
            var body = MakeBody();
            return body.Fold($"Delete File. [DELETE: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.ListStoredHookSubscriptions op) => () =>
        {
            var uri = MakeUri($"/hooks");
            var body = MakeBody();
            return body.Fold($"List Stored Hook Subscriptions. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<RestHook>> AsShow<T>(this InfusioOp<T>.CreateAHookSubscription op) => () =>
        {
            var uri = MakeUri($"/hooks");
            var body = MakeBody(op.RestHookRequest);
            return body.Fold($"Create a Hook Subscription. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.ListHookEventTypes op) => () =>
        {
            var uri = MakeUri($"/hooks/event_keys");
            var body = MakeBody();
            return body.Fold($"List Hook Event Types. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<RestHook>> AsShow<T>(this InfusioOp<T>.RetrieveAHookSubscription op) => () =>
        {
            var uri = MakeUri($"/hooks/{op.Key}");
            var body = MakeBody();
            return body.Fold($"Retrieve a Hook Subscription. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<RestHook>> AsShow<T>(this InfusioOp<T>.UpdateAHookSubscription op) => () =>
        {
            var uri = MakeUri($"/hooks/{op.Key}");
            var body = MakeBody(op.RestHookRequest);
            return body.Fold($"Update a Hook Subscription. [PUT: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.DeleteAHookSubscription op) => () =>
        {
            var uri = MakeUri($"/hooks/{op.Key}");
            var body = MakeBody();
            return body.Fold($"Delete a Hook Subscription. [DELETE: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<RestHook>> AsShow<T>(this InfusioOp<T>.VerifyAHookSubscriptionDelayed op) => () =>
        {
            var uri = MakeUri($"/hooks/{op.Key}/delayedVerify");
            var body = MakeBody();
            return body.Fold($"Verify a Hook Subscription, Delayed. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<RestHook>> AsShow<T>(this InfusioOp<T>.VerifyAHookSubscription op) => () =>
        {
            var uri = MakeUri($"/hooks/{op.Key}/verify");
            var body = MakeBody();
            return body.Fold($"Verify a Hook Subscription. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<UserInfoDTO>> AsShow<T>(this InfusioOp<T>.GetUserInfo op) => () =>
        {
            var uri = MakeUri($"/oauth/connect/userinfo");
            var body = MakeBody();
            return body.Fold($"Retrieve User Info. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<OpportunityList>> AsShow<T>(this InfusioOp<T>.ListOpportunities op) => () =>
        {
            var uri = MakeUri($"/opportunities", RequestParameter("order", op.Order), RequestParameter("searchTerm", op.SearchTerm), RequestParameter("stageId", op.StageId), RequestParameter("userId", op.UserId), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit));
            var body = MakeBody();
            return body.Fold($"List Opportunities. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Opportunity>> AsShow<T>(this InfusioOp<T>.CreateOpportunity op) => () =>
        {
            var uri = MakeUri($"/opportunities");
            var body = MakeBody(op.Opportunity);
            return body.Fold($"Create an Opportunity. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Opportunity>> AsShow<T>(this InfusioOp<T>.UpdateOpportunity op) => () =>
        {
            var uri = MakeUri($"/opportunities");
            var body = MakeBody(op.Opportunity);
            return body.Fold($"Replace an Opportunity. [PUT: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<ObjectModel>> AsShow<T>(this InfusioOp<T>.RetrieveOpportunityModel op) => () =>
        {
            var uri = MakeUri($"/opportunities/model");
            var body = MakeBody();
            return body.Fold($"Retrieve Opportunity Model. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Opportunity>> AsShow<T>(this InfusioOp<T>.GetOpportunity op) => () =>
        {
            var uri = MakeUri($"/opportunities/{op.OpportunityId}", RequestParameter("optionalProperties", op.OptionalProperties));
            var body = MakeBody();
            return body.Fold($"Retrieve an Opportunity. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Opportunity>> AsShow<T>(this InfusioOp<T>.UpdatePropertiesOnOpportunity op) => () =>
        {
            var uri = MakeUri($"/opportunities/{op.OpportunityId}");
            var body = MakeBody(op.Opportunity);
            return body.Fold($"Update an Opportunity. [PATCH: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.ListOpportunityStagePipelines op) => () =>
        {
            var uri = MakeUri($"/opportunity/stage_pipeline");
            var body = MakeBody();
            return body.Fold($"List Opportunity Stage Pipeline. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<OrderList>> AsShow<T>(this InfusioOp<T>.ListOrders op) => () =>
        {
            var uri = MakeUri($"/orders", RequestParameter("productId", op.ProductId), RequestParameter("contactId", op.ContactId), RequestParameter("order", op.Order), RequestParameter("paid", op.Paid), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("until", op.Until), RequestParameter("since", op.Since));
            var body = MakeBody();
            return body.Fold($"List Orders. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<ObjectModel>> AsShow<T>(this InfusioOp<T>.RetrieveOrderModel op) => () =>
        {
            var uri = MakeUri($"/orders/model");
            var body = MakeBody();
            return body.Fold($"Retrieve Custom Order Model. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Order>> AsShow<T>(this InfusioOp<T>.GetOrder op) => () =>
        {
            var uri = MakeUri($"/orders/{op.OrderId}");
            var body = MakeBody();
            return body.Fold($"Retrieve an Order. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<TransactionList>> AsShow<T>(this InfusioOp<T>.ListTransactionsForOrder op) => () =>
        {
            var uri = MakeUri($"/orders/{op.OrderId}/transactions", RequestParameter("contactId", op.ContactId), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("until", op.Until), RequestParameter("since", op.Since));
            var body = MakeBody();
            return body.Fold($"Retrieve Order Transactions. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<ProductList>> AsShow<T>(this InfusioOp<T>.ListProducts op) => () =>
        {
            var uri = MakeUri($"/products", RequestParameter("active", op.Active), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit));
            var body = MakeBody();
            return body.Fold($"List Products. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<ProductStatusList>> AsShow<T>(this InfusioOp<T>.ListProductsFromSyncToken op) => () =>
        {
            var uri = MakeUri($"/products/sync", RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("syncToken", op.SyncToken));
            var body = MakeBody();
            return body.Fold($"Retrieve Synced Products. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Product>> AsShow<T>(this InfusioOp<T>.GetProduct op) => () =>
        {
            var uri = MakeUri($"/products/{op.ProductId}");
            var body = MakeBody();
            return body.Fold($"Retrieve a Product. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Setting>> AsShow<T>(this InfusioOp<T>.GetApplicationEnabled op) => () =>
        {
            var uri = MakeUri($"/setting/application/enabled");
            var body = MakeBody();
            return body.Fold($"Retrieve application status. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Setting>> AsShow<T>(this InfusioOp<T>.GetContactOptionTypes op) => () =>
        {
            var uri = MakeUri($"/setting/contact/optionTypes");
            var body = MakeBody();
            return body.Fold($"List Contact types. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<ObjectModel>> AsShow<T>(this InfusioOp<T>.RetrieveSubscriptionModel op) => () =>
        {
            var uri = MakeUri($"/subscriptions/model");
            var body = MakeBody();
            return body.Fold($"Retrieve Subscription Model. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Tags>> AsShow<T>(this InfusioOp<T>.ListTags op) => () =>
        {
            var uri = MakeUri($"/tags", RequestParameter("category", op.Category), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit));
            var body = MakeBody();
            return body.Fold($"List Tags. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Tag>> AsShow<T>(this InfusioOp<T>.CreateTag op) => () =>
        {
            var uri = MakeUri($"/tags");
            var body = MakeBody(op.Tag);
            return body.Fold($"Create Tag. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<TagCategory>> AsShow<T>(this InfusioOp<T>.CreateTagCategory op) => () =>
        {
            var uri = MakeUri($"/tags/categories");
            var body = MakeBody(op.TagCategory);
            return body.Fold($"Create Tag Category. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Tag>> AsShow<T>(this InfusioOp<T>.GetTag op) => () =>
        {
            var uri = MakeUri($"/tags/{op.Id}");
            var body = MakeBody();
            return body.Fold($"Retrieve a Tag. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<TaggedContactList>> AsShow<T>(this InfusioOp<T>.ListContactsForTagId op) => () =>
        {
            var uri = MakeUri($"/tags/{op.TagId}/contacts", RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit));
            var body = MakeBody();
            return body.Fold($"List Tagged Contacts. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.ApplyTagToContactIds op) => () =>
        {
            var uri = MakeUri($"/tags/{op.TagId}/contacts");
            var body = MakeBody(op.Ids);
            return body.Fold($"Apply Tag to Contacts. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.RemoveTagFromContactIds op) => () =>
        {
            var uri = MakeUri($"/tags/{op.TagId}/contacts", RequestParameter("ids", op.Ids));
            var body = MakeBody();
            return body.Fold($"Remove Tag from Contacts. [DELETE: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.RemoveTagFromContactId op) => () =>
        {
            var uri = MakeUri($"/tags/{op.TagId}/contacts/{op.ContactId}");
            var body = MakeBody();
            return body.Fold($"Remove Tag from Contact. [DELETE: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<TaskList>> AsShow<T>(this InfusioOp<T>.ListTasks op) => () =>
        {
            var uri = MakeUri($"/tasks", RequestParameter("order", op.Order), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("completed", op.Completed), RequestParameter("until", op.Until), RequestParameter("since", op.Since), RequestParameter("userId", op.UserId), RequestParameter("hasDueDate", op.HasDueDate), RequestParameter("contactId", op.ContactId));
            var body = MakeBody();
            return body.Fold($"List Tasks. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<InfusionTask>> AsShow<T>(this InfusioOp<T>.CreateTask op) => () =>
        {
            var uri = MakeUri($"/tasks");
            var body = MakeBody(op.Task);
            return body.Fold($"Create a Task. [POST: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<ObjectModel>> AsShow<T>(this InfusioOp<T>.RetrieveTaskModel op) => () =>
        {
            var uri = MakeUri($"/tasks/model");
            var body = MakeBody();
            return body.Fold($"Retrieve Task Model. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<TaskList>> AsShow<T>(this InfusioOp<T>.ListTasksForCurrentUser op) => () =>
        {
            var uri = MakeUri($"/tasks/search", RequestParameter("order", op.Order), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("completed", op.Completed), RequestParameter("until", op.Until), RequestParameter("since", op.Since), RequestParameter("userId", op.UserId), RequestParameter("hasDueDate", op.HasDueDate), RequestParameter("contactId", op.ContactId));
            var body = MakeBody();
            return body.Fold($"Search Tasks. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<InfusionTask>> AsShow<T>(this InfusioOp<T>.GetTask op) => () =>
        {
            var uri = MakeUri($"/tasks/{op.TaskId}");
            var body = MakeBody();
            return body.Fold($"Retrieve a Task. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<InfusionTask>> AsShow<T>(this InfusioOp<T>.UpdateTask op) => () =>
        {
            var uri = MakeUri($"/tasks/{op.TaskId}");
            var body = MakeBody(op.Task);
            return body.Fold($"Replace a Task. [PUT: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.DeleteTask op) => () =>
        {
            var uri = MakeUri($"/tasks/{op.TaskId}");
            var body = MakeBody();
            return body.Fold($"Delete a Task. [DELETE: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<InfusionTask>> AsShow<T>(this InfusioOp<T>.UpdatePropertiesOnTask op) => () =>
        {
            var uri = MakeUri($"/tasks/{op.TaskId}");
            var body = MakeBody(op.Task);
            return body.Fold($"Update a Task. [PATCH: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<TransactionList>> AsShow<T>(this InfusioOp<T>.ListTransactions op) => () =>
        {
            var uri = MakeUri($"/transactions", RequestParameter("contactId", op.ContactId), RequestParameter("offset", op.Offset), RequestParameter("limit", op.Limit), RequestParameter("until", op.Until), RequestParameter("since", op.Since));
            var body = MakeBody();
            return body.Fold($"List Transactions. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };

        public static Show<InfusioOp<Transaction>> AsShow<T>(this InfusioOp<T>.GetTransaction op) => () =>
        {
            var uri = MakeUri($"/transactions/{op.TransactionId}");
            var body = MakeBody();
            return body.Fold($"Retrieve a Transaction. [GET: {uri}]", (msg, bd) => $"{msg}: {bd}");
        };



        static Option<string> MakeBody(params Option<(string name, object value)>[] values) =>
            from body in Some(values.FoldT(HashMap<string, object>(), (acc, x) => acc.Add(x.name, x.value)))
            where !body.IsEmpty
            select SerializeObject(body, SerializerSettings);

        static Option<string> MakeBody(object body) => SerializeObject(body, SerializerSettings);
    }
}