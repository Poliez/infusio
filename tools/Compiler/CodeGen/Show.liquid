//----------------------
// <auto-generated>
// </auto-generated>
//----------------------
using System;
using Infusio.Http;
using Infusio.Model;
using LanguageExt;
using Newtonsoft.Json;

namespace Infusio
{
    using static Prelude;
    using static HttpUtils;
    using static JsonConvert;
    using static InfusioClient;

    public delegate string Show<out T>();

    internal static class ShowExtensions
    {
        public static Show<T> AsShow<T>(this T self) => self.ToString;
        public static Show<T> AsShow<T>(this T self, Func<T, string> fn) => () => fn(self);

        public static Show<InfusioOp<Unit>> AsShow<T>(this InfusioOp<T>.Log op) => () => op.Message;

{% for op in Operations -%}
        public static Show<InfusioOp<{{ op.ResponseType | normalize }}>> AsShow<T>(this InfusioOp<T>.{{ op.Name }} op) => () =>
        {
            var uri = MakeUri($"{{ op.Path | showoperationpath }}"{% if op.HasQueryParameters %}, {% endif %}{% for p in op.QueryParameters -%}
                                                                  RequestParameter("{{ p.Name }}", op.{{ p.Name | capitalize }}){% if forloop.last == false %}, {% endif %}{% endfor -%});
            var body = MakeBody({% if op.HasSingleBodyParameter -%}op.{{ op.SingleBodyParameter.Name | capitalize }}{% else -%}
                                                                                           {% for p in op.RequestBodyParameters %}
                                                                                               RequestParameter("{{ p.Name }}", op.{{ p.Name | capitalize }}){% if forloop.last == false %}, {% endif -%}
                                                                                           {% endfor -%}
                                                                                           {% endif -%});
            {% assign uri = '{uri}' -%}
            return body.Fold($"{{ op.Summary }}. [{{ op.HttpMethod | upcase }}: {{ uri }}]", (msg, bd) => $"{msg}: {bd}");
        };

{% endfor %}

        static Option<string> MakeBody(params Option<(string name, object value)>[] values) =>
            from body in Some(values.FoldT(HashMap<string, object>(), (acc, x) => acc.Add(x.name, x.value)))
            where !body.IsEmpty
            select SerializeObject(body, SerializerSettings);

        static Option<string> MakeBody(object body) => SerializeObject(body, SerializerSettings);
    }
}