//----------------------
// <auto-generated>
// </auto-generated>
//----------------------
using System;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

using Infusio.Model;
using LanguageExt;
using LanguageExt.TypeClasses;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

// ReSharper disable RedundantStringInterpolation

namespace Infusio.Http
{
    using static Prelude;
    using static HttpUtils;
    using static JsonConvert;

    public class InfusioClient
    {
        private readonly HttpClient _client;
        private readonly InfusioConfig _config;

        public InfusioClient(HttpClient client, InfusioConfig config)
        {
            _client = client;
            _config = config;
        }

        {% for op in Operations -%}
        /// <summary>
        /// {{ op.Summary }}
        /// </summary>
        {% for p in op.Parameters -%}
        /// <param name="{{ p.Name }}">{{ p.Description }}</param>
        {% endfor -%}
        public Task<Either<InfusioError, {{ op.ResponseType | normalize }}>> {{ op.Name }}({% for p in op.Parameters %}{{ p.OptionalTypeName }} {{ p.Name }}{% if p.Required == false %} = default{% endif %}{% if forloop.last == false %}, {% endif %}{% endfor %}) =>
                    HttpWorkflow{% if op.ResponseType != 'Unit' %}<{{ op.ResponseType | normalize }}>{% endif %}(
                        message: Request({% if op.HttpMethod == 'Patch' -%}
                                new HttpMethod("{{ op.HttpMethod }}"){% else %}HttpMethod.{{ op.HttpMethod }}{% endif -%},MakeUri($"{{ op.Path }}"{% if op.HasQueryParameters %}, {% endif %}{% for p in op.QueryParameters -%}
                                RequestParameter("{{ p.Name }}", {{ p.Name }}){% if forloop.last == false %}, {% endif %}{% endfor %}), _config.AccessToken{% if op.HasRequestBodyParameters -%}, {% endif -%}{% if op.HasSingleBodyParameter -%}
                            {{ op.SingleBodyParameter.Name }}{% else -%}{% for p in op.RequestBodyParameters -%}RequestParameter("{{ p.Name }}", {{ p.Name }}){% if forloop.last == false -%}, {% endif -%}{% endfor -%}{% endif -%}),
                        responses: HashSet<KnownResponse.Eq, KnownResponse>(
{% for res in op.Responses -%}
                            new KnownResponse({{ res.StatusCode }}, "{{ res.Description }}", typeof({{ res.Type | normalize }})){% if forloop.last == false %}, {% endif %}
{% endfor -%}
                    ))(_client);

        /// <summary>
        /// {{ op.Summary }}
        /// </summary>
        /// <remarks>Does not catch exceptions. It is preferred to use <see cref="{{ op.Name }}"/>.</remarks>
        {% for p in op.Parameters -%}
        /// <param name="{{ p.Name }}">{{ p.Description }}</param>
        {% endfor -%}
        public Task<{{ op.ResponseType | normalize }}> {{ op.Name }}Unsafe({% for p in op.Parameters %}{{ p.Type }} {{ p.Name }}{% if p.Required == false %} = default{% endif %}{% if forloop.last == false %}, {% endif %}{% endfor %}) => {{ op.Name }}({% for p in op.Parameters -%}
            {{ p.Name }}{% if forloop.last == false %}, {% endif -%}{% endfor -%})
                    .ToAsync()
                    .IfLeftAsync(e => throw new Exception(e.Value));

        {% endfor -%}
    }
}